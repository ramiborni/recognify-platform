// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  TEAM_LEADER
  USER
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")
  role          UserRole  @default(USER)

  accounts Account[]
  sessions Session[]

  stripeCustomerId       String?       @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?       @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?       @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime?     @map(name: "stripe_current_period_end")
  recognitionsGiven      Recognition[] @relation("GivenRecognitions")
  recognitionsReceived   Recognition[] @relation("ReceivedRecognitions")
  Feedback               Feedback[]

  Team         Team?   @relation(fields: [teamId], references: [id])
  teamId       String?
  isTeamLeader Boolean @default(true)
}

model Team {
  id   String  @id @default(cuid())
  name String?

  teamMembers User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Survey Survey[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Recognition {
  id         String                @id @default(uuid())
  message    String
  giver      User                  @relation("GivenRecognitions", fields: [giverId], references: [id])
  giverId    String
  receiver   User                  @relation("ReceivedRecognitions", fields: [receiverId], references: [id])
  receiverId String
  isPublic   Boolean               @default(false)
  reactions  RecognationReaction[]
  badges     RecognationBadges[]
  createdAt  DateTime              @default(now())
  updatedAt  DateTime              @updatedAt
}

enum RecognationReaction {
  LIKE
  LOVE
  CLAP
  THANK
}

enum RecognationBadges {
  STAR_PERFORMER
  OUTSTANDING_ACHIEVEMENT
  GREAT_TEAMWORK
  INNOVATIVE_THINKER
  CUSTOMER_FAVOURITE
  LEADER
}

model Survey {
  id        String       @id @default(uuid())
  title     String
  questions String[] // You can store JSON array of questions
  responses Feedback[]
  Team      Team         @relation(fields: [teamId], references: [id])
  teamId    String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  status    SurveyStatus @default(PENDING)
}

model Feedback {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  surveyId  String
  survey    Survey   @relation(fields: [surveyId], references: [id])
  response  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SurveyStatus {
  PENDING
  ACTIVE
  CLOSED
  COMPLETED
}
