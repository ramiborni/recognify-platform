// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  TEAM_LEADER
  USER
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  createdAt      DateTime  @default(now()) @map(name: "created_at")
  updatedAt      DateTime  @default(now()) @map(name: "updated_at")
  role           UserRole  @default(USER)
  profilePicture String?

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  // LTD Data
  isLTD      Boolean   @default(false)
  isLTDStart DateTime?
  ltdPlan    String?

  recognitionsGiven    Recognition[] @relation("GivenRecognitions")
  recognitionsReceived Recognition[] @relation("ReceivedRecognitions")
  feedbacks            Feedback[]

  team         Team?   @relation(fields: [teamId], references: [id])
  teamId       String?
  isTeamLeader Boolean @default(false)

  slackWebhook String?

  assagnedSurveys Survey[]

  claps Clap[]
}

model Team {
  id   String  @id @default(cuid())
  name String?

  teamMembers User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  surveys Survey[]

  TeamInvitation TeamInvitation[]

  recognitions Recognition[]
}

model TeamInvitation {
  id        String   @id @default(cuid())
  email     String
  name      String
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Recognition {
  id         String              @id @default(cuid())
  message    String
  giver      User                @relation("GivenRecognitions", fields: [giverId], references: [id])
  giverId    String
  receiver   User                @relation("ReceivedRecognitions", fields: [receiverId], references: [id])
  receiverId String
  isPublic   Boolean             @default(false)
  points     Int
  badges     RecognationBadges[]
  team       Team                @relation(fields: [teamId], references: [id])
  teamId     String
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt

  claps Clap[]
}

model Clap {
  id            String   @id @default(cuid())
  userId        String
  recognitionId String
  createdAt     DateTime @default(now())

  user        User        @relation(fields: [userId], references: [id])
  recognition Recognition @relation(fields: [recognitionId], references: [id])

  @@unique([userId, recognitionId])
}

enum RecognationBadges {
  STAR_PERFORMER
  OUTSTANDING_ACHIEVEMENT
  GREAT_TEAMWORK
  INNOVATIVE_THINKER
  CUSTOMER_FAVOURITE
  LEADER
}

model Survey {
  id          String       @id @default(cuid())
  title       String
  description String
  questions   Json[]
  responses   Feedback[]
  team        Team         @relation(fields: [teamId], references: [id])
  teamId      String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  status      SurveyStatus @default(PENDING)

  // New relation to track selected members who are part of the survey
  selectedTeamMembers User[]
}

model Feedback {
  id       String @id @default(cuid())
  userId   String
  user     User   @relation(fields: [userId], references: [id])
  surveyId String
  survey   Survey @relation(fields: [surveyId], references: [id])

  // Storing the answers to survey questions as JSON. Each answer corresponds to a question in Survey.questions.
  responses Json[] // Store individual responses for each question in JSON

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SurveyStatus {
  PENDING
  ACTIVE
  CLOSED
  COMPLETED
}
